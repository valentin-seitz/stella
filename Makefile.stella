####################################################################
#                          STELLA MAKEFILE                         #
#################################################################### 
# While the 'Makefile' defines all the compiler options and flags,
# and compiles the external libraries 'git_version' and 'neasyf',
# the 'Makefile.stella' aims to build the stella executable. 
#
# ------------------------ STELLA EXECUTABLE -----------------------
# When the 'make' command is used, without any additional arguments,
# it should build the stella executable. Therefore, the DEFAULT_GOAL
# is set to 'stella_all' which will first build the target 'modules'
# and then the target 'stella'. 
#
# In short, this section of code will define:
#       .DEFAULT_GOAL := stella_all
#       stella_all: modules stella
#       modules: utils.a mini_libstell.a
#       stella: $(external_modules) $(stella_mod) 
#               $(LD) $(LDFLAGS) -o $@ $^ $(LIBS)
#
# To stella executable is build by the target 'stella' 
# On the first line of the target 'stella' we define the dependencies
# On the second line we define the compilation or build commands
# 
# ------------------------- COMPILE MODULES ------------------------
# We can build the static libraries (with suffix *.a) separately:
#       >> make utils.a
#       >> make mini_libstell.a 
#   
####################################################################

####################################################################
#                            DIRECTORIES                           #
####################################################################

# Print the paths to the command prompt (set in 'Makefile')
# Note that the directories of the external modules are already defined
$(info   )
$(info   =========================================================================)
$(info   ============================== DIRECTORIES ==============================)
$(info   =========================================================================)
$(info   CURRENT_DIRECTORY is $(CURRENT_DIRECTORY))
$(info   MAKEFILE_PATH is $(MAKEFILE_PATH))
$(info   STELLA_PARENT_DIR is $(STELLA_PARENT_DIR))
$(info   STELLA_CODE_DIR is $(STELLA_CODE_DIR))
$(info   )
$(info   =========================================================================)
$(info   =============================== EXTERNALS ===============================)
$(info   =========================================================================)
$(info   EXTERNALS_DIR is $(EXTERNALS_DIR))
$(info   $(UTILS_DIR)/utils.a)
$(info   $(MINILIBSTELL_DIR)/mini_libstell.a)
$(info   $(NEASYF_DIR)/neasyf.a) 
$(info   )

# Export the subdirectories so they are available to child processes
export STELLACODE=$(STELLA_CODE_DIR)
export DIAG=$(STELLA_CODE_DIR)/diagnostics
export GEO=$(STELLA_CODE_DIR)/geometry
export COLL=$(STELLA_CODE_DIR)/dissipation


####################################################################
#                  DIRECTORIES WITH FORTRAN CODE                   #
####################################################################

# VPATH is a list of directories to be searched for missing source files
# The value of the make variable VPATH specifies a list of directories that make should search.
VPATH = $(STELLACODE):$(DIAG):$(COLL):$(GEO)

# Include the external libraries 'utils.a', 'mini_libstell.a', 'neasyf.a' and 'git_version_impl.o'
VPATH += $(UTILS_DIR):$(MINILIBSTELL_DIR):$(NEASYF_DIR):$(GIT_VERSION_DIR)

# Removes non-existing directories from VPATH
VPATH_tmp := $(foreach tmpvp,$(subst :, ,$(VPATH)),$(shell [ -d $(tmpvp) ] && echo $(tmpvp)))
VPATH = .:$(shell echo $(VPATH_tmp) | sed "s/ /:/g")

####################################################################
#            READ THE DEPENDENCIES OF THE SOURCE FILES             #
####################################################################

# The dependencies of one source file on other source files
# is given in the file stella/Makefile.depend
DEPEND = Makefile.depend
DEPEND_CMD = $(PERL) fortdep
include $(DEPEND)

# Most common include and library directories
# Important to include the external libraries 'utils.a', 'mini_libstell.a' and 'neasyf.a'
DEFAULT_INC_LIST = . $(STELLACODE) $(DIAG) $(COLL) $(GEO) $(UTILS_DIR) $(MINILIBSTELL_DIR) $(NEASYF_DIR) 
DEFAULT_LIB_LIST =
DEFAULT_INC = $(foreach tmpinc,$(DEFAULT_INC_LIST),$(shell [ -d $(tmpinc) ] && echo -I$(tmpinc)))
DEFAULT_LIB = $(foreach tmplib,$(DEFAULT_LIB_LIST),$(shell [ -d $(tmplib) ] && echo -L$(tmplib)))

# List of intermediate f90 files generated by preprocessor
F90FROMFPP = $(patsubst %.fpp,%.f90,$(notdir $(wildcard *.fpp */*.fpp)))

####################################################################
#                         STELLA EXECUTABLE                        #
#################################################################### 
# When the 'make' command is used, without any additional arguments,
# it should build the stella executable. Therefore, the DEFAULT_GOAL
# is set to 'stella_all' which will first build the target 'modules'
# and then the target 'stella'. 
#
# In short, this section of code will define:
#       .DEFAULT_GOAL := stella_all
#       stella_all: modules stella
#       modules: utils.a mini_libstell.a
#       stella: $(external_modules) $(stella_mod) 
#               $(LD) $(LDFLAGS) -o $@ $^ $(LIBS)
#
# To stella executable is build by the target 'stella' 
# On the first line of the target 'stella' we define the dependencies
# On the second line we define the compilation or build commands
#
# ----------------------------- .PHONY -----------------------------
# When we define a target as 'target: ...', the command 'make' will 
# build a file based on other files. If our target does not build a 
# file we label it as a PHONY target. Therefore, a phony target is 
# not really the name of a file; rather it is just a name for a recipe 
# to be executed when you make an explicit request. 
#  
####################################################################
 
# If we call 'make' without any additional arguments, it will build the target 'stella_all'
# .DEFAULT_GOAL works for GNU make 3.81 (or higher), while for 3.80 or less, we use the 'all' target
# We define 'stella_all' (and 'all') as phony targets since it will execute the recipe 'modules stella'
# hence this command itself does not build a file 'stella_all' or 'all', instead 'modules' will 
# build the files 'utils.a' and 'mini_libstell.a', while 'stella' builds the executable 'stella'
.PHONY: stella_all all
.DEFAULT_GOAL := stella_all 
all: $(.DEFAULT_GOAL)

# The 'stella_all' target will first make the 'modules' target and then the 'stella' target
# where 'modules' will build the statis libraries 'utils.a' and 'mini_libstell.a'
stella_all: external_modules stella

# Build the stella executable
# On the first line of the target 'stella' we define the dependencies
# On the second line we define the compilation or build commands
# Note that "stella_mod" is defined in the Makefile.depend file, 
# which is build by 'fortdep' and which contains all stella's dependencies
stella: $(external_modules_dependencies) $(stella_mod)
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

# Remove the executable
distclean:
	-rm -f stella

# Include the automated Fortran tests
# Inside 'tests/automated_fortran_tests/Makefile' we define the commands 
# >> build-pfunit-library 
# >> run-automated-fortran-tests
$(STELLA_PARENT_DIR)tests/automated_fortran_tests/Makefile:
include $(STELLA_PARENT_DIR)/tests/automated_fortran_tests/Makefile

$(STELLA_PARENT_DIR)tests/automated_numerical_tests_for_stella/Makefile:
include $(STELLA_PARENT_DIR)/tests/automated_numerical_tests_for_stella/Makefile
 
# Run all tests together with the 'check' command
check: run-automated-fortran-tests run-automated-numerical-tests-for-stella


####################################################################
#                              Targets                             #
####################################################################
# Targets represent executables, libraries, and utilities built by CMake
#     depend: generate dependency
#     clean: clean up
#     distclean: does "make clean" + removes platform links & executables
# "stella_all" is defined in stella/Makefile.target_stella
####################################################################

# Declare all public targets
# These words can be added after the make command:
#   >> make
#   >> make depend
#   >> make clean
#   >> make distclean
.PHONY: depend clean distclean clean-quick

depend: $(GIT_VERSION_SENTINEL) $(NEASYF)
	@$(DEPEND_CMD) -m "$(MAKE)" -1 -o -v=0 $(VPATH)

# To compile correctly it is very important to remove the previously build
# *.o and *.mod files. Here '$(MAKE) -C $(MINILIBSTELL) clean' will look at 
# utils/mini_libstell/makefile and it will its clean target as well.
clean:
	-rm -f *.o *.mod *.g90 *.h core */core *~ *.smod
	-rm -f $(BUILDDIR)/*.o $(BUILDDIR)/*.mod $(BUILDDIR)/*.smod 
	-rm -f $(GEO)/*.o $(GEO)/*~
	-rm -f Makefiles/*~
	-rm -f $(UTILS_DIR)/*.o $(UTILS)/*~
	-rm -f $(COLL)/*.o $(COLL)/*~
	-rm -f $(DIAG)/*.o $(DIAG)/*~
	-rm -f .compiler_flags
	$(MAKE) -C $(MINILIBSTELL_DIR) clean
	
# Normally you shouldn't touch the external libraries
# So don't remove the utils and mini_libstell static libraries
clean-quick:
	-rm -f *.o *.mod *.g90 *.h core */core *~ *.smod
	-rm -f $(GEO)/*.o $(GEO)/*~
	-rm -f Makefiles/*~ 
	-rm -f $(COLL)/*.o $(COLL)/*~
	-rm -f $(DIAG)/*.o $(DIAG)/*~
	-rm -f .compiler_flags 

cleanlib:
	-rm -f *.a

distclean: unlink clean cleanlib


