# Run these tests automatically on Github on every push and pull request.
# Use the macOS operating system, which has 4 cores.
name: Check stella on macOS
on: [push, pull_request]

# We always run in a bash shell
defaults:
  run:
    shell: bash

# First build stella, and then perform python tests
jobs:


#-----------------------------------------------------------------------
#                             Build stella                             
#-----------------------------------------------------------------------
  build-stella:
  
    # Set environment variables
    env:
      OMPI_MCA_rmaps_base_oversubscribe: yes
      MPIRUN: mpiexec -np  
      STELLA_SYSTEM: macos
    
    # Run the same set-up multiple times
    strategy:
      fail-fast: false
      matrix:
        os: [macos-12, macos-13]
        compiler: [Make, CMake]
    
    # Operating system
    runs-on: ${{ matrix.os }}
      
    # Steps
    steps:
    
      # Set environment variables as echo "{name}={value}" >> $GITHUB_ENV
      - name: Set environment variables
        run: |
          if [ ${{ matrix.os }} == 'macos-12' ]; then 
            echo "FFTW_LIB_DIR=/usr/local/Cellar/fftw/3.3.10_1/lib/" >> $GITHUB_ENV; echo "Set FFTW_LIB_DIR"
            echo "FFTW_INC_DIR=/usr/local/include/" >> $GITHUB_ENV; echo "Set FFTW_INC_DIR"
            echo "NETCDF_LIB_DIR=/usr/local/lib -L/usr/local/Cellar/netcdf-fortran/4.6.1/lib/" >> $GITHUB_ENV; echo "Set NETCDF_LIB_DIR"
            echo "NETCDF_INC_DIR=/usr/local/Cellar/netcdf-fortran/4.6.1/include/" >> $GITHUB_ENV; echo "Set NETCDF_INC_DIR"
          elif [ ${{ matrix.os }} == 'macos-13' ]; then 
            echo "FFTW_LIB_DIR=/usr/local/Cellar/fftw/3.3.10_1/lib/" >> $GITHUB_ENV; echo "Set FFTW_LIB_DIR"
            echo "FFTW_INC_DIR=/usr/local/include/" >> $GITHUB_ENV; echo "Set FFTW_INC_DIR"
            echo "NETCDF_LIB_DIR=/usr/local/lib -L/usr/local/Cellar/netcdf-fortran/4.6.1/lib/" >> $GITHUB_ENV; echo "Set NETCDF_LIB_DIR"
            echo "NETCDF_INC_DIR=/usr/local/Cellar/netcdf-fortran/4.6.1/include/" >> $GITHUB_ENV; echo "Set NETCDF_INC_DIR"
          fi

      # Install dependencies
      - name: Install dependencies
        run: | 
          brew install gcc@11 make openmpi fftw netcdf-fortran
          sudo ln -s /usr/local/bin/gfortran-11 /usr/local/bin/gfortran
          sudo mkdir /usr/local/gfortran
          sudo ln -s /usr/local/Cellar/gcc@11/*/lib/gcc/11 /usr/local/gfortran/lib
          gfortran --version

      # Print system information
      - name: System information
        run: |
          echo " "; echo "System information:"; echo "$(system_profiler SPHardwareDataType | sed 's/^/  /')"
          echo " "; echo "Gfortran version:"; echo "$(gfortran --version | sed 's/^/  /')"
          echo " "; echo "Clang version:"; echo "$(clang --version | sed 's/^/  /')"

      # Check-out repository under $GITHUB_WORKSPACE
      - name: Check-out repository
        uses: actions/checkout@v4 
          
      # Build stella executable
      - name: Build stella
        run: |
          echo " "; echo "System variables:" 
          echo "   FFTW_LIB_DIR = $FFTW_LIB_DIR"
          echo "   FFTW_INC_DIR = $FFTW_INC_DIR"
          echo "   NETCDF_LIB_DIR = $NETCDF_LIB_DIR"
          echo "   NETCDF_INC_DIR = $NETCDF_INC_DIR"
          echo " "; echo "Download submodules:" 
          git submodule update --init --recursive
          echo " "; echo "Build stella with ${{ matrix.compiler }}:" 
          if [ ${{ matrix.compiler }} == 'Make' ]; then 
             make -j 4
          fi
          if [ ${{ matrix.compiler }} == 'CMake' ]; then 
             cmake . -B COMPILATION/build_cmake
             cmake --build COMPILATION/build_cmake -j 4
          fi
          
      # Check $GITHUB_WORKSPACE
      - name: Check Github Workspace
        run: | 
          echo " "; echo "Running directory:"; echo "  $(pwd)"
          echo " "; echo "Files in directory:"; echo "$(ls -la | sed 's/^/  /')"
          
      # Upload stella (macos-13 matches linux)
      - name: Upload stella 
        if: matrix.compiler == 'CMake' && matrix.os == 'macos-12'
        uses: actions/upload-artifact@v4
        with:
          name: stella-executable-macos-cmake
          path: stella
          retention-days: 1


#-----------------------------------------------------------------------
#                             Python tests                              
#-----------------------------------------------------------------------

  # Run automatic python tests, after stella has been compiled
  numerical-tests: 
    needs: build-stella
    runs-on: macos-13
    env:
      OMPI_MCA_rmaps_base_oversubscribe: yes
      MPIRUN: mpiexec -np
      STELLA_SYSTEM: macos
    
    # Run the same set-up multiple times
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "1 - Does stella run "
          - name: "2 - Geometry"
          - name: "3 - Gyrokinetic equation"
          - name: "4 - Flux tube"
          - name: "5 - Diagnostics"
      
    steps:

      # Install dependencies
      - name: Install dependencies
        run: brew install gcc@11 make openmpi fftw netcdf-fortran gnu-sed
      
      # Make the gfortran command available
      - name: Symlink gfortran (macOS)
        if: runner.os == 'macOS'
        run: | 
          sudo ln -s /usr/local/bin/gfortran-11 /usr/local/bin/gfortran
          sudo mkdir /usr/local/gfortran
          sudo ln -s /usr/local/Cellar/gcc@11/*/lib/gcc/11 /usr/local/gfortran/lib
          gfortran --version

      # Check-out repository under $GITHUB_WORKSPACE
      - name: Check out repository
        uses: actions/checkout@v4

      # Download stella executable from previous job
      - name: Download stella 
        uses: actions/download-artifact@v4
        with:
           name: stella-executable-macos-cmake
           
      # Make stella executable and run on 4 processors
      - name: Make stella executable
        run: |
            echo " "; echo "Make stella executable:"
            chmod +x stella
            echo " "; echo "Running directory:"; echo "  $(pwd)"
            echo " "; echo "Files in directory:"; echo "$(ls -la | sed 's/^/  /')"
            gsed -i 's/nproc = 16/nproc = 4/g' AUTOMATIC_TESTS/config.ini 
          
      # Install python environment
      - name: Install python virtual environment
        run: pip3 install --user -r AUTOMATIC_TESTS/requirements.txt

      # Perform python tests  
      - name: Numerical python tests
        run: |
          if [ ${{ contains(matrix.config.name, '1 -') }} ]; then 
             make numerical-tests-1
          elif [ ${{ contains(matrix.config.name, '2 -') }} ]; then 
             make numerical-tests-2
          elif [ ${{ contains(matrix.config.name, '3 -') }} ]; then 
             make numerical-tests-3
          elif [ ${{ contains(matrix.config.name, '4 -') }} ]; then 
             make numerical-tests-4
          elif [ ${{ contains(matrix.config.name, '5 -') }} ]; then 
             make numerical-tests-5
          fi 

# If the operating system is changed, we can check where modules are installed
# by reading the CMake cache file:
#    echo " "; echo "--------- DIRECTORIES ----------"
#    cat COMPILATION/build_cmake/CMakeCache.txt

# We can also install Homebrew and use the following lines of code
#    echo "Install Homebrew:"
#    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; brew update
#    echo "FFTW_LIB_DIR=/opt/homebrew/lib/" >> $GITHUB_ENV; echo "Set FFTW_LIB_DIR"
#    echo "FFTW_INC_DIR=/opt/homebrew/include/" >> $GITHUB_ENV; echo "Set FFTW_INC_DIR"
#    echo "NETCDF_LIB_DIR=/opt/homebrew/lib/" >> $GITHUB_ENV; echo "Set NETCDF_LIB_DIR"
#    echo "NETCDF_INC_DIR=/opt/homebrew/include/" >> $GITHUB_ENV; echo "Set NETCDF_INC_DIR"
#    brew install gcc fftw netcdf netcdf-fortran open-mpi python
#    ln -sn /opt/homebrew/bin/gfortran-12 /opt/homebrew/bin/gfortran


