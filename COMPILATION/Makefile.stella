####################################################################
#                          STELLA MAKEFILE                         #
#################################################################### 
# The 'Makefile' defines the compiler options and flags, 
# the 'Makefile.externals' compiles the external libraries, and
# the 'Makefile.stella' builds the stella executable. 
#
# ------------------------ STELLA EXECUTABLE -----------------------
# When the 'make' command is used, without any additional arguments,
# it should build the stella executable. Therefore, the DEFAULT_GOAL
# is set to 'stella_all' which will first build the target 'modules'
# and then the target 'stella'. 
#
# In short, this Makefile will define:
#       .DEFAULT_GOAL := stella_all
#       stella_all: modules stella
#       stella: $(external_modules) $(stella_mod) 
#               $(LD) $(LDFLAGS) -o $@ $^ $(LIBS)
#
# To stella executable is build by the target 'stella' 
# On the first line of the target 'stella' we define the dependencies
# On the second line we define the compilation or build commands
#   
####################################################################

#===================================================================
#                            DIRECTORIES                           #
#===================================================================
 
# Export the subdirectories so they are available to child processes
export STELLACODE=$(STELLA_DIR)
export DIAG=$(STELLA_DIR)/diagnostics
export GEO=$(STELLA_DIR)/geometry
export COLL=$(STELLA_DIR)/dissipation

#===================================================================
#                  DIRECTORIES WITH FORTRAN CODE                   #
#===================================================================

# VPATH is a list of directories to be searched for missing source files
# The value of the make variable VPATH specifies a list of directories that make should search.
VPATH = $(STELLACODE):$(DIAG):$(COLL):$(GEO):

VPATH += $(BUILD_OBJECTS_DIR):$(BUILD_MODULES_DIR):$(BUILD_F90_DIR):

# Include the external libraries 'utils.a', 'mini_libstell.a', 'neasyf.a' and 'git_version_impl.o'
VPATH += $(UTILS_DIR):$(MINILIBSTELL_DIR):$(NEASYF_DIR):$(GIT_VERSION_DIR)

# Removes non-existing directories from VPATH
VPATH_tmp := $(foreach tmpvp,$(subst :, ,$(VPATH)),$(shell [ -d $(tmpvp) ] && echo $(tmpvp)))
VPATH = .:$(shell echo $(VPATH_tmp) | sed "s/ /:/g") 

#===================================================================
#            READ THE DEPENDENCIES OF THE SOURCE FILES             #
#===================================================================

# The dependencies of one source file on other source files
# is given in the file stella/Makefile.depend
DEPEND_FILE = $(COMPILATION_DIR)/Makefile.depend
DEPEND_CMD = $(PERL) $(COMPILATION_DIR)/fortdep
include $(DEPEND_FILE)

# For the prerequisites, we need to make sure that the external libraries 
# 'git_version' and 'neasyf' are correctly downloaded, these prerequisites
# will trigger the 'submodules' target. We also need to make sure that 
# the 'build_make' directory exists.  
.PHONY: depend  
depend: create-build-directories create-symbolic-links
	@$(MAKE) --no-print-directory create-depend-file
create-depend-file: $(GIT_VERSION_SENTINEL) $(NEASYF) $(BUILD_DIR)
	@echo "          "
	@echo "Write the depencies of the Fortran scripts with fortdep"
	@$(DEPEND_CMD) -makecmd "$(MAKE)" -file $(DEPEND_FILE) -1 -overwrite -verbose=0 -fppfolder $(BUILD_F90_DIR_NAME) $(VPATH)
	@echo "   - Written $(DEPEND_FILE)"
	@echo "          "

# Most common include and library directories
# Important to include the external libraries 'utils.a', 'mini_libstell.a' and 'neasyf.a'
DEFAULT_INC_LIST = . $(STELLACODE) $(DIAG) $(COLL) $(GEO) $(UTILS_DIR) $(MINILIBSTELL_DIR) $(NEASYF_DIR) $(BUILD_OBJECTS_DIR) $(BUILD_MODULES_DIR) $(BUILD_F90_DIR)
DEFAULT_LIB_LIST =
DEFAULT_INC = $(foreach tmpinc,$(DEFAULT_INC_LIST),$(shell [ -d $(tmpinc) ] && echo -I$(tmpinc)))
DEFAULT_LIB = $(foreach tmplib,$(DEFAULT_LIB_LIST),$(shell [ -d $(tmplib) ] && echo -L$(tmplib)))

#===================================================================
#                         STELLA EXECUTABLE                        #
#===================================================================
# When the 'make' command is used, without any additional arguments,
# it should build the stella executable. Therefore, the DEFAULT_GOAL
# is set to 'stella_all' which will first build the target 'modules'
# and then the target 'stella'. 
#
# In short, this section of code will define:
#       .DEFAULT_GOAL := stella_all
#       stella_all: modules stella
#       modules: utils.a mini_libstell.a
#       stella: $(external_modules) $(stella_mod) 
#               $(LD) $(LDFLAGS) -o $@ $^ $(LIBS)
#
# To stella executable is build by the target 'stella' 
# On the first line of the target 'stella' we define the dependencies
# On the second line we define the compilation or build commands
#===================================================================
  
# We set the .DEFAULT_GOAL to 'stella_all', so that the call 'make' 
# without any additional arguments, will build the stella executable  
.PHONY: stella_all
.DEFAULT_GOAL := stella_all 

# For GNU make 3.80 or less, we use the 'all' target 
.PHONY: all
all: $(.DEFAULT_GOAL)

# The 'stella_all' target will first ensure that the build directories a
# are made (should already by done by 'make clean'). Next it will build the
# external static libraries 'utils.a' and 'mini_libstell.a' through the 
# target 'build-external-modules'. Finally it compiles the stella code. 
stella_all: build-external-modules build-stella

# Before we can build stella we need to ensure that we first created all the *.f90 files
# from the *.fpp files, and that we have spl.o (which depends on constants.o) otherwise
# we get the following error: Cannot rename module file ‘.../splines.mod0’ to ‘.../splines.mod’: No such file or directory
.PHONY: build-stella 
build-stella: build-f90-from-fpp
	@$(MAKE) --no-print-directory stella
	@$(MAKE) --no-print-directory stella-finished 

# Build the stella executable
# On the first line of the target 'stella' we define the dependencies 
# On the second line we define the compilation or build commands
# Note that 'stella_mod' is defined in the Makefile.depend file, which is 
# build by 'fortdep' and which contains the dependencies of the fortran scripts
# -o is a compiler option that specifies the name of the output file.
# $@ is the name of the target being generated -> 'stella'
# $< is the first prerequisite -> the first file in '$(external_modules_dependencies)'
# $^ are all the prerequisites -> all files in '$(external_modules_dependencies)' and '$(stella_mod)'
stella: $(external_modules_dependencies) $(stella_mod) 
	@$(LD) $(LDFLAGS) -o $@ $(addprefix $(BUILD_OBJECTS_DIR)/, $(notdir $^)) $(LIBS)
	@echo "                     " 
	@echo "       ==> Compile stella"

# A message to know whether the compilation has finished
.PHONY: stella-finished
stella-finished: 
	@echo "                     " 
	@echo "Finished compiling stella."
	@echo "                     " 


#===================================================================
#                          AUTOMATED TESTS                         #
#===================================================================

# Test the Fortran subroutines
$(PROJECT_DIR)/AUTOMATIC_TESTS/test_fortran_routines/Makefile:
include $(PROJECT_DIR)/AUTOMATIC_TESTS/test_fortran_routines/Makefile

# Numerical tests performed on stella runs
$(PROJECT_DIR)/AUTOMATIC_TESTS/numerical_tests_for_stella/Makefile:
include $(PROJECT_DIR)/AUTOMATIC_TESTS/numerical_tests_for_stella/Makefile
 
# Run all tests together with the 'check' command
check: run-automated-fortran-tests run-automated-numerical-tests-for-stella

#===================================================================
#                               Clean                              #
#===================================================================

# We make the following two phony commands:
#	>> make clean
#	>> make clean-verbose
#	>> make distclean
.PHONY: clean clean-verbose distclean

# Remove all previously build *.o and *.mod files, and create symbolic links for the *.fpp files create-build-directories create-symbolic-links
clean: remove-build-files clean-pfunit
clean-quick: remove-build-files-quick 
clean-verbose: print-directories print-directories-externals clean

# 'distclean' should leave only the files that were in the distributions
distclean: clean remove-executable

# Remove the executable
remove-executable:
	-rm -f stella

# ----------------------- Remove build files -----------------------

# To compile correctly it is very important to remove the previously build
# *.o and *.mod files. Here '$(MAKE) -C $(MINILIBSTELL) clean' will look at 
# utils/mini_libstell/makefile and it will invoke its clean target as well.
# Here '@' does not print the command to the command prompt
.PHONY: remove-build-files remove-build-files-quick remove-build-files-all
remove-build-files: remove-build-files-quick remove-build-files-all
remove-build-files-quick:
	@echo "                     "
	@echo "Clean stella project:"
	@echo "   - remove compiled files"
	@-rm -f $(BUILD_F90_DIR)/*.f90 $(BUILD_F90_DIR)/*.fpp $(BUILD_F90_DIR)/*.inc
	@-rm -f $(BUILD_MODULES_DIR)/*.mod $(BUILD_MODULES_DIR)/*.smod $(BUILD_MODULES_DIR)/*.mod0
	@-rm -f $(BUILD_OBJECTS_DIR)/*.o 
	@if [ -d "$(BUILD_OBJECTS_DIR)" ]; then rmdir $(BUILD_OBJECTS_DIR); fi
	@if [ -d "$(BUILD_MODULES_DIR)" ]; then rmdir $(BUILD_MODULES_DIR); fi
	@if [ -d "$(BUILD_F90_DIR)" ]; then rmdir $(BUILD_F90_DIR); fi 
	@if [ -d "$(BUILD_DIR)" ]; then rmdir $(BUILD_DIR); fi
	@if [ -d "$(COMPILATION_DIR)/build_cmake" ]; then rm -rf $(COMPILATION_DIR)/build_cmake; fi
	@echo "   - remove temp files"
	@-rm -f *.o *.mod *.g90 *.h core */core *~ *.smod 
	@-rm -f $(GEO)/*.o $(GEO)/*~
	@-rm -f Makefiles/*~
	@-rm -f $(UTILS_DIR)/*.o $(UTILS)/*~
	@-rm -f $(COLL)/*.o $(COLL)/*~
	@-rm -f $(DIAG)/*.o $(DIAG)/*~
	@-rm -f .compiler_flags 
remove-build-files-all:  
	@-rm -f *.a
	@$(MAKE) --no-print-directory -C $(MINILIBSTELL_DIR) clean
	
	
# ----------------- Symbolic links for *.fpp files -----------------
	
# Get the name of the symbolic links we want to make
existing_fpp_files = $(wildcard $(UTILS_DIR)/*.fpp) $(wildcard $(STELLACODE)/*.fpp)
existing_fpp_file_names := $(notdir $(existing_fpp_files))
symbolic_links_of_fpp_files := $(addprefix $(BUILD_F90_DIR)/, $(existing_fpp_file_names)) 

# If the symlink '$(BUILD_F90_DIR)/%.fpp' is a prerequisite, and it does not exist, it will be created
$(BUILD_F90_DIR)/%.fpp: $(UTILS_DIR)/%.fpp 
	@ln -s $< $(BUILD_F90_DIR)
$(BUILD_F90_DIR)/%.fpp: $(STELLACODE)/%.fpp 
	@ln -s $< $(BUILD_F90_DIR)
    
# Add the symlinks as the prerequisites of the 'create_symbolic_links' target
.PHONY: create-symbolic-links
create-symbolic-links: $(symbolic_links_of_fpp_files)
	@echo "          "
	@echo "Create links to the *.fpp files to preprocess them in a separate folder"
	@echo "   - ln -s STELLACODE/*.fpp COMPILATION/$(BUILD_F90_DIR_NAME)/*.fpp"	
	@ln -sf $(UTILS_DIR)/define.inc $(BUILD_F90_DIR)/define.inc
	@echo "          "
	             
# Make sure we have preprocessed the *.fpp files
# By making sure that the $(BUILD_F90_DIR)/%.f90 files exist
# Before this step, make sure 'create-build-directories' is finished
.PHONY: build-f90-from-fpp build-f90-from-fpp-files
f90_from_fpp_files = $(symbolic_links_of_fpp_files:.fpp=.f90)
$(BUILD_F90_DIR)/%.f90: $(BUILD_F90_DIR)/%.fpp 
	@$(CPP) $(CPPFLAGS) -J$(BUILD_MODULES_DIR) $< $@
	@echo "    *.fpp to *.f90: $(notdir $<)"
build-f90-from-fpp: create-build-directories 
	@$(MAKE) --no-print-directory create-symbolic-links
	@$(MAKE) --no-print-directory build-f90-from-fpp-files
build-f90-from-fpp-files: $(f90_from_fpp_files)
  


